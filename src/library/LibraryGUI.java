

package library;

import javax.swing.JOptionPane;
import library.exceptions.*;

/**
 *
 * @author Harry Walker
 */
public class LibraryGUI extends javax.swing.JFrame {

    private SetOfMembers theMembers = new SetOfMembers();
    
    private SetOfBooks theBooks = new SetOfBooks();
    
    private SetOfBooks loanedBooks = new SetOfBooks();
    
    private Book selectedBook = null;
    private Member selectedMember = null;
    
    private Storage store;
    

    /** Creates new form LibraryGUI */
    public LibraryGUI() {

        initComponents();
            
        this.store = new Storage(this.theMembers, this.theBooks);
                
        this.theMembers = this.store.getDataMembers();
        this.theBooks = this.store.getDataBooks();
        
//        this.theMembers.add(new Member("Jane"));
//        this.theMembers.add(new Member("Bob"));
//        this.theMembers.add(new Member("John"));
//        this.theMembers.add(new Member("Harry"));
//        
//        this.theMembers.add((new Librarian("Librarian*")));
//        
//        this.theBooks.add(new Book("Book1", "Author1", 111));
//        this.theBooks.add(new Book("Book2", "Author2", 222));
//        this.theBooks.add(new Book("Book3", "Author3", 333));
//        this.theBooks.add(new Book("Book4", "Author4", 444));
//        this.theBooks.add(new Book("Book5", "Author5", 555));
//        this.theBooks.add(new Book("Book6", "Author6", 666));
//        this.theBooks.add(new Book("Book7", "Author7", 777));
//        this.theBooks.add(new Book("Book8", "Author8", 888));
        
        
        this.listMembers.setListData(theMembers.toArray());
        this.listBooks.setListData(theBooks.toArray());
        
    }
    
    public void loanBook()
    {
        try
        {
            if (selectedBook.isOnLoan()) 
                throw new BookOnLoanException();

            if (selectedMember.numOnLoan() >= selectedMember.getMaxLoan())
                 throw new TooManyLoanedException();

                selectedMember.borrowBook(selectedBook);
                showCurrentLoans();


        } catch (BookOnLoanException e) {
            String bookOnLoan = "Book already on loan by user "
                    + selectedBook.getBorrower().getName();
            JOptionPane.showMessageDialog(this,
                bookOnLoan,
                "Error",
                JOptionPane.ERROR_MESSAGE); 
        } catch (NullPointerException e) {
            errorMessage("No book/member selected.",
                    "Ensure that a member and a book are selected.");
        } catch (TooManyLoanedException e) {
                String bookOnLoan = "Cannot loan more than "
                        + Integer.toString(selectedMember.getMaxLoan()) + " books.";
                JOptionPane.showMessageDialog(this,
                    bookOnLoan,
                    "Error",
                    JOptionPane.ERROR_MESSAGE); 
        }
    }
    
    public void returnBook()
    {
        try
        {
            String bookString = this.listLoanedBooks.getSelectedValue().toString();
            String strArr[] = bookString.split("-");

            int bookISBN = Integer.parseInt(strArr[2].trim());

            System.out.println(bookISBN);

            selectedBook = theBooks.findBookFromISBN(bookISBN);

            System.out.println(selectedBook.toString());
            System.out.println(selectedMember.numOnLoan());

            selectedMember.returnBook(selectedBook);
            
            showCurrentLoans();
        } catch (NullPointerException e)
        {
            errorMessage("No loaned book selected", 
                    "Select a loaned book from the list.");
        }
    }
    
    public void showCurrentLoans()
    {
        listLoanedBooks.removeAll();
        
        try
        {
            listLoanedBooks.setListData(selectedMember.getBooksOnLoan().toArray()); 
        } catch (NullPointerException e)
        {
            //user not selected, ignore
        }
        listLoanedBooks.setListData(selectedMember.getBooksOnLoan().toArray());
    }
    
    public void loadMembers()
    {
        listMembers.removeAll();
        listMembers.setListData(theMembers.toArray());
    }
    
    public void loadBooks()
    {
        listBooks.removeAll();
        listBooks.setListData(theBooks.toArray());
    }
    
    public void errorMessage(String title, String message)
    {
        JOptionPane.showMessageDialog(this,
            message,
            title,
            JOptionPane.ERROR_MESSAGE);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLoanBook = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listLoanedBooks = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        listMembers = new javax.swing.JList();
        lblHeader = new javax.swing.JLabel();
        lblMemberList = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listBooks = new javax.swing.JList();
        listAvailableBooks = new javax.swing.JLabel();
        lblLoanedBooks = new javax.swing.JLabel();
        btnReturnBook = new javax.swing.JButton();
        btnSelectedMember = new javax.swing.JButton();
        btnSelectBook = new javax.swing.JButton();
        btnAddBook = new javax.swing.JButton();
        btnAddMember = new javax.swing.JButton();
        btnRemoveBook = new javax.swing.JButton();
        btnRemoveMember = new javax.swing.JButton();
        lblBookImage = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("library/Bundle"); // NOI18N
        setTitle(bundle.getString("LibraryGUI.title")); // NOI18N
        setPreferredSize(new java.awt.Dimension(900, 380));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnLoanBook.setText(bundle.getString("LibraryGUI.btnLoanBook.text")); // NOI18N
        btnLoanBook.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLoanBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoanBookActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listLoanedBooks);

        listMembers.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listMembers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMembersMouseClicked(evt);
            }
        });
        listMembers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listMembersValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listMembers);

        lblHeader.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblHeader.setText(bundle.getString("LibraryGUI.lblHeader.text")); // NOI18N

        lblMemberList.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblMemberList.setText(bundle.getString("LibraryGUI.lblMemberList.text")); // NOI18N

        listBooks.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listBooks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listBooksMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(listBooks);

        listAvailableBooks.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listAvailableBooks.setText(bundle.getString("LibraryGUI.listAvailableBooks.text")); // NOI18N

        lblLoanedBooks.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblLoanedBooks.setText(bundle.getString("LibraryGUI.lblLoanedBooks.text")); // NOI18N

        btnReturnBook.setText(bundle.getString("LibraryGUI.btnReturnBook.text")); // NOI18N
        btnReturnBook.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReturnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnBookActionPerformed(evt);
            }
        });

        btnSelectedMember.setText(bundle.getString("LibraryGUI.btnSelectedMember.text")); // NOI18N
        btnSelectedMember.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSelectedMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectedMemberActionPerformed(evt);
            }
        });

        btnSelectBook.setText(bundle.getString("LibraryGUI.btnSelectBook.text")); // NOI18N
        btnSelectBook.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSelectBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectBookActionPerformed(evt);
            }
        });

        btnAddBook.setIcon(new javax.swing.ImageIcon("F:\\Case_Studies\\01 SubtaskOne\\01 Skeleton\\Library\\images\\add.png")); // NOI18N
        btnAddBook.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBookActionPerformed(evt);
            }
        });

        btnAddMember.setIcon(new javax.swing.ImageIcon("F:\\Case_Studies\\01 SubtaskOne\\01 Skeleton\\Library\\images\\add.png")); // NOI18N
        btnAddMember.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMemberActionPerformed(evt);
            }
        });

        btnRemoveBook.setIcon(new javax.swing.ImageIcon("F:\\Case_Studies\\01 SubtaskOne\\01 Skeleton\\Library\\images\\remove.png")); // NOI18N
        btnRemoveBook.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemoveBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveBookActionPerformed(evt);
            }
        });

        btnRemoveMember.setIcon(new javax.swing.ImageIcon("F:\\Case_Studies\\01 SubtaskOne\\01 Skeleton\\Library\\images\\remove.png")); // NOI18N
        btnRemoveMember.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemoveMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveMemberActionPerformed(evt);
            }
        });

        lblBookImage.setIcon(new javax.swing.ImageIcon("F:\\Case_Studies\\01 SubtaskOne\\01 Skeleton\\Library\\images\\books.png")); // NOI18N

        lblAuthor.setText(bundle.getString("LibraryGUI.lblAuthor.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAddMember, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemoveMember, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblMemberList)
                                .addComponent(btnSelectedMember, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                .addComponent(jScrollPane2))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listAvailableBooks)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblLoanedBooks)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                                .addComponent(btnReturnBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblBookImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnSelectBook, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnLoanBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveBook, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(242, 242, 242))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBookImage)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMemberList)
                            .addComponent(listAvailableBooks)
                            .addComponent(lblLoanedBooks))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSelectedMember)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLoanBook)
                        .addComponent(btnSelectBook)
                        .addComponent(btnReturnBook)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddBook)
                    .addComponent(btnRemoveBook)
                    .addComponent(btnRemoveMember)
                    .addComponent(btnAddMember))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(lblAuthor))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoanBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoanBookActionPerformed

        loanBook();
    }//GEN-LAST:event_btnLoanBookActionPerformed

    private void listMembersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listMembersValueChanged
        // TODO add your handling code here:
        
        //System.out.println(listMembers.getValueIsAdjusting());
        
    }//GEN-LAST:event_listMembersValueChanged

    private void listMembersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMembersMouseClicked
        // TODO add your handling code here:
        
       String memberString = this.listMembers.getSelectedValue().toString();
       String strArr[] = memberString.split(" ");
       
       String memberName = strArr[1];
       
       selectedMember = theMembers.getMemberFromName(memberName);
       
       
    }//GEN-LAST:event_listMembersMouseClicked

    private void listBooksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listBooksMouseClicked
        
       String bookString = this.listBooks.getSelectedValue().toString();
       String strArr[] = bookString.split("-");
       
       int bookISBN = Integer.parseInt(strArr[2].trim());
       
       selectedBook = theBooks.findBookFromISBN(bookISBN);
      
    }//GEN-LAST:event_listBooksMouseClicked

    private void btnReturnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnBookActionPerformed
            
       returnBook();
        
    }//GEN-LAST:event_btnReturnBookActionPerformed

    private void btnSelectedMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectedMemberActionPerformed
       
       try
       {
            String memberString = this.listMembers.getSelectedValue().toString();
            String strArr[] = memberString.split(" ");

            String memberName = strArr[1];

            selectedMember = 
                    theMembers.getMemberFromName(memberName);

            showCurrentLoans();
       }
       catch (NullPointerException e)
       {
           errorMessage("No member selected",
                   "Select a member from the list.");
       }
    }//GEN-LAST:event_btnSelectedMemberActionPerformed

    private void btnSelectBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectBookActionPerformed
       try
       {
            String bookString = this.listBooks.getSelectedValue().toString();
            String strArr[] = bookString.split("-");

            int bookISBN = Integer.parseInt(strArr[2].trim());

            selectedBook = theBooks.findBookFromISBN(bookISBN);
       } catch (NullPointerException e)
       {
           errorMessage("No book selected",
                   "Select a book from the list.");
       }
    }//GEN-LAST:event_btnSelectBookActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
        //store objects into binary files
        this.store.saveDataToFile(this.theBooks, this.theMembers);
       
    }//GEN-LAST:event_formWindowClosing

    private void btnAddMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMemberActionPerformed
       
        String input = JOptionPane.showInputDialog("Add Member - Enter member name");
        if (input != null)
        {
            if (!input.isEmpty())
            {
                Member newMember = new Member(input);
                newMember.setMemberNumber(this.theMembers.getNumMembers());
                this.theMembers.add(newMember);
                loadMembers();
            }
            else
            {
               errorMessage("Error",
                       "Empty inputs, try again."); 
            }
        } 
        else 
        { 
             errorMessage("Error",
                     "Operation cancelled."); 
        }
        
        
    }//GEN-LAST:event_btnAddMemberActionPerformed

    private void btnRemoveMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveMemberActionPerformed
        try
        {   
            String deleteStr = "Are you sure you want to delele user: " + selectedMember.getName() + "?";
            int dialogResult = JOptionPane.showConfirmDialog (null, deleteStr);
            
            if(dialogResult == JOptionPane.YES_OPTION)
            {
                selectedMember.returnAllBooks();
                theMembers.remove(selectedMember);
                showCurrentLoans();
                loadMembers();
            }
        } catch (NullPointerException e)
        {
            errorMessage("No member selected", 
                    "Select a member from the list");
        }
    }//GEN-LAST:event_btnRemoveMemberActionPerformed

    private void btnAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBookActionPerformed
        String bookName = JOptionPane.showInputDialog("Add New Book - Enter Book Name: ");
        String bookAuthor = JOptionPane.showInputDialog("Add New Book - Enter Book Author: ");
        String bookISBN = JOptionPane.showInputDialog("Add New Book - Enter Book ISBN: ");
        
        
        if (bookName != null || bookAuthor != null || bookISBN != null)
        {
            try
            {
                if (bookName.isEmpty() || bookAuthor.isEmpty() || bookISBN.isEmpty())
                    throw new FieldsEmptyException();

                    Book newBook = 
                            new Book(bookName, bookAuthor, Integer.parseInt(bookISBN));
                    
                    if (theBooks.isBookUnique(newBook))
                        theBooks.add(newBook);
                    else
                    {
                        errorMessage("ISBN already exists.",
                                "Book ISBN: " + bookISBN + " already exists. Must be unique.");
                    }

                    loadBooks();
                            
            } catch (FieldsEmptyException e)
            {
                errorMessage("Not all fields were entered",
                        "Ensure all fields are entered.");
            }
            catch (NumberFormatException e)
            {
                errorMessage("ISBN must be a number",
                        "ISBN must be an integer, try again.");
            }
        }
        else
        {
            errorMessage("Operation canelled by user",
                    "Operation cancelled.");
        }
       
    }//GEN-LAST:event_btnAddBookActionPerformed

    private void btnRemoveBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveBookActionPerformed
      try
      {
            String deleteStr = "Are you sure you want to delele book: " + selectedBook.getTitle() + "?";
            int dialogResult = JOptionPane.showConfirmDialog (null, deleteStr);
            
            if(dialogResult == JOptionPane.YES_OPTION)
            {
                theBooks.removeBook(selectedBook);         
                loadBooks();
                showCurrentLoans();
            }
      } catch (NullPointerException e)
      {
          errorMessage("No book selected", 
                  "Select a book to remove.");
      }

    }//GEN-LAST:event_btnRemoveBookActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                new LibraryGUI().setVisible(true);
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBook;
    private javax.swing.JButton btnAddMember;
    private javax.swing.JButton btnLoanBook;
    private javax.swing.JButton btnRemoveBook;
    private javax.swing.JButton btnRemoveMember;
    private javax.swing.JButton btnReturnBook;
    private javax.swing.JButton btnSelectBook;
    private javax.swing.JButton btnSelectedMember;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblBookImage;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblLoanedBooks;
    private javax.swing.JLabel lblMemberList;
    private javax.swing.JLabel listAvailableBooks;
    private javax.swing.JList listBooks;
    private javax.swing.JList listLoanedBooks;
    private javax.swing.JList listMembers;
    // End of variables declaration//GEN-END:variables


}
